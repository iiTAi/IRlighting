#include <Arduino.h>
#include <M5StickCPlus.h>
#include <IRremoteESP8266.h>
#include <IRsend.h>

enum modes {
  darken,
  brighten,
  sleepTimer,
  allOn,
  allOff,
  nightLight,
  num
};

const uint16_t IrLed = 9;  // GPIO pin.

const uint16_t rawData_dk[115] = {9048, 4514,  560, 1700,  582, 546,  582, 542,  586, 566,  562, 1672,  584, 544,  582, 1676,  582, 544,  582, 542,  586, 1700,  560, 1674,  582, 550,  578, 1676,  584, 1672,  586, 1676,  580, 546,  580, 542,  586, 566,  560, 542,  584, 544,  584, 1676,  578, 568,  560, 542,  584, 542,  582, 544,  582, 546,  582, 540,  586, 542,  582, 544,  582, 548,  576, 546,  584, 542,  582, 542,  584, 566,  560, 542,  556, 570,  584, 542,  558, 1700,  586, 564,  538, 566,  584, 566,  558, 568,  558, 566,  562, 566,  560, 568,  560, 568,  556, 544,  582, 566,  560, 1676,  584, 566,  558, 1700,  560, 1700,  560, 564,  560, 544,  582, 1702,  556, 570,  530};
const uint16_t rawData_bt[115] = {9046, 4512,  582, 1676,  582, 544,  634, 512,  562, 544,  584, 1672,  586, 542,  582, 1676,  582, 544,  584, 542,  586, 1696,  534, 1698,  586, 544,  582, 1674,  586, 1674,  582, 1674,  582, 544,  582, 542,  586, 540,  586, 542,  584, 544,  582, 1674,  584, 544,  584, 540,  584, 542,  584, 546,  606, 518,  582, 544,  582, 542,  584, 542,  584, 542,  582, 542,  586, 540,  584, 544,  584, 542,  584, 542,  582, 542,  586, 1672,  582, 544,  582, 544,  582, 542,  584, 542,  584, 542,  582, 544,  582, 546,  582, 542,  586, 542,  582, 542,  560, 566,  586, 1674,  558, 570,  584, 1698,  534, 1724,  536, 1700,  584, 1674,  584, 1674,  582, 546,  554};
const uint16_t rawData_st[115] = {9050, 4512,  558, 1700,  584, 544,  582, 546,  584, 538,  584, 1676,  556, 572,  582, 1698,  560, 542,  582, 544,  584, 1698,  560, 1674,  586, 542,  584, 1678,  580, 1680,  578, 1674,  560, 568,  586, 542,  580, 566,  562, 542,  582, 544,  582, 1674,  584, 540,  558, 568,  584, 542,  584, 540,  588, 538,  586, 540,  584, 544,  582, 542,  584, 542,  584, 542,  582, 544,  584, 540,  584, 542,  584, 542,  586, 538,  588, 540,  586, 542,  584, 538,  586, 544,  584, 540,  582, 542,  586, 540,  584, 542,  584, 544,  580, 1674,  584, 544,  608, 514,  560, 1722,  562, 542,  586, 1674,  582, 1698,  562, 542,  586, 564,  534, 1700,  584, 542,  556};
const uint16_t rawData_on[115] = {9042, 4516,  582, 1674,  582, 542,  584, 566,  560, 542,  584, 1674,  582, 546,  582, 1674,  584, 544,  582, 546,  556, 1698,  586, 1674,  582, 544,  584, 1674,  584, 1674,  560, 1698,  584, 544,  582, 544,  580, 542,  586, 540,  582, 568,  562, 1672,  584, 540,  586, 544,  558, 566,  584, 546,  580, 566,  534, 568,  584, 542,  584, 540,  584, 566,  558, 548,  580, 544,  582, 1676,  582, 542,  582, 540,  588, 544,  582, 542,  582, 542,  588, 538,  586, 544,  582, 540,  586, 542,  582, 546,  580, 542,  560, 568,  586, 540,  584, 544,  582, 566,  562, 542,  582, 544,  582, 1678,  582, 1672,  582, 546,  582, 1680,  578, 1678,  582, 566,  536};
const uint16_t rawData_of[115] = {9046, 4538,  562, 1672,  556, 568,  582, 570,  556, 544,  558, 1700,  556, 592,  564, 1670,  586, 546,  580, 570,  560, 1672,  582, 1676,  584, 544,  582, 1672,  586, 1674,  582, 1674,  586, 542,  586, 538,  560, 568,  588, 544,  580, 540,  560, 1724,  558, 542,  582, 568,  560, 562,  562, 566,  558, 544,  582, 566,  562, 542,  580, 544,  582, 544,  584, 566,  560, 538,  560, 570,  582, 1678,  582, 564,  560, 568,  554, 544,  612, 538,  558, 566,  560, 568,  560, 566,  558, 542,  584, 568,  556, 568,  562, 542,  584, 566,  558, 566,  560, 568,  588, 1646,  584, 1672,  588, 1674,  582, 1678,  580, 542,  586, 1696,  562, 1674,  582, 570,  528};
const uint16_t rawData_nl[115] = {9076, 4536,  560, 1672,  584, 544,  582, 566,  536, 566,  584, 1674,  582, 568,  560, 1698,  560, 540,  586, 542,  582, 1698,  538, 1722,  536, 568,  584, 1674,  582, 1676,  584, 1674,  584, 544,  586, 540,  584, 542,  584, 544,  584, 540,  588, 1672,  584, 546,  580, 566,  560, 544,  584, 542,  584, 546,  580, 542,  584, 544,  584, 542,  586, 540,  584, 546,  608, 514,  584, 544,  582, 544,  584, 1676,  582, 542,  586, 542,  582, 544,  582, 544,  582, 544,  586, 564,  562, 542,  582, 544,  582, 542,  586, 540,  584, 542,  584, 546,  578, 544,  586, 1672,  584, 548,  580, 544,  582, 1674,  584, 542,  586, 1674,  582, 1674,  584, 546,  556};
char modeStr[15];
enum modes mode;

IRsend irsend(IrLed);  // Set the pin to be used to sending the signal.

void setup() {
  M5.begin();
  irsend.begin();
  Serial.begin(115200);
  mode = darken;
}

void loop() {
  M5.update();
  switch (mode) {
    case darken: {
      sprintf(modeStr, "DARKEN");
      if (M5.BtnA.isPressed())
        irsend.sendRaw(rawData_dk, 115, 38);
      else if (M5.BtnB.wasPressed())
        mode = brighten;
      else if (M5.Axp.GetBtnPress() == 2)
        mode = nightLight;
      break;
    }
    case brighten: {
      sprintf(modeStr, "BRIGHTEN");
      if (M5.BtnA.isPressed())
        irsend.sendRaw(rawData_bt, 115, 38);
      else if (M5.BtnB.wasPressed())
        mode = sleepTimer;
      else if (M5.Axp.GetBtnPress() == 2)
        mode = darken;
      break;
    }
    case sleepTimer: {
      sprintf(modeStr, "SLEEPTIMER");
      if (M5.BtnA.isPressed())
        irsend.sendRaw(rawData_st, 115, 38);
      else if (M5.BtnB.wasPressed())
        mode = allOn;
      else if (M5.Axp.GetBtnPress() == 2)
        mode = brighten;
      break;
    }
    case allOn: {
      sprintf(modeStr, "ALLON");
      if (M5.BtnA.isPressed())
        irsend.sendRaw(rawData_on, 115, 38);
      else if (M5.BtnB.wasPressed())
        mode = allOff;
      else if (M5.Axp.GetBtnPress() == 2)
        mode = sleepTimer;
      break;
    }
    case allOff: {
      sprintf(modeStr, "ALLOFF");
      if (M5.BtnA.isPressed())
        irsend.sendRaw(rawData_of, 115, 38);
      else if (M5.BtnB.wasPressed())
        mode = nightLight;
      else if (M5.Axp.GetBtnPress() == 2)
        mode = allOn;
      break;
    }
    case nightLight: {
      sprintf(modeStr, "NIGHTLIGHT");
      if (M5.BtnA.isPressed())
        irsend.sendRaw(rawData_nl, 115, 38);
      else if (M5.BtnB.wasPressed())
        mode = darken;
      else if (M5.Axp.GetBtnPress() == 2)
        mode = allOff;
      break;
    }
  }

  M5.Lcd.setRotation(1);
  M5.Lcd.setCursor(24, 35);
  M5.Lcd.setTextSize(3);
  M5.Lcd.print("MODE:");
  M5.Lcd.setCursor(24, 70);
  M5.Lcd.setTextSize(3);
  M5.Lcd.printf("%-15s", modeStr);

  delay(100);
}